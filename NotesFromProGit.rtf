==============================================================Chapter:01:Begining==============================================================
git config --global user.name "Prajit Gandhi"
git config --global user.email "Prajit.Ju@gmail.com"
git config --global core.editor "C:/Soft/NotePad/notepad++.exe"
To Check Settings:git config --list
Check Particular Property:git config user.name
For Help:git help config/git config --help
==============================================================Chapter:02:Git Basics============================================================
Initialized A Git Directory In NonExisting Empty Directory:git init
Add Files To Local Repo:git add *.png
Commit Files:git commit[Will Open Default Editor We Set Earlier,Add A Commit Message[Initial Commit For Demo Git Project]]
To Clone Use:git clone https://github.com/spring-projects/spring-framework.git .\Spring500ReleaseCandidate02\[Example Url]
TrackedUnTracked.png To Show Tracked & UnTracked File In Git Use:git status
git add Is Polymorphic.
git status --short|git status --s Output Simplified Version
FirstColumn[Status For Staging Area,A:Added,M:Modified]|SecondColumn[Status For Working Directory,A:Added,M:Modified]
Untracked Files Will Have ?? In Those 2 Columns.
Use Kinesics Text Editor For Cmd Text Editing.For .gitignore See https://github.com/github/gitignore
To Retrieve Differences Between Working Area & Stage Area We Will Use git diff
To Retrieve Differences Between Stage Area & Last Commit We Will Use git diff --staged/git diff --cached
SetUp Default Diff Tool & DiffTool Gui:
To Unset Any Values In Configuration:Ex. git config --unset diff.guitool |git config --unset diff.tool
To Check The DiffTool Help:git difftool --tool-help
Set Default Diff Tool Using  git difftool --tool=diffuse,Also Do Following:
For Details Goto https://www.git-scm.com/docs/git-difftool/1.7.10:
git config --global diff.tool diffuse
git config --global diff.guitool diffuse
git config --global difftool.diffuse.path "C:/Soft/Diffuse/diffuse.exe"
git commit Will Commit Only Staged File.UnStaged Files Needs To Be Staged First.
git commit With -v[Verbose] & -m[Message],-a[Add Directly To Skip Staging,But Add All Changed Files] Option/Flag.
git rm --cached <FileName> Remove Files From Staging/Index Area -f Flag Will Force Removal.
git mv <FileNameFrom> <FileNameTo> Will Rename File In Git.
git log --patch -2 --stat[Check Git History With What Patched[-p/--patch] For 2 Last Commit,With Statistics]
git log --pretty=oneline|short|full|fuller[For Pretty Print]
[%H Commit Hash|%h Abbreviated Commit Hash|%T Tree Hash|%t Abbreviated Tree Hash|%P Parent Hashes|%p Abbreviated Parent Hashes]
git log --pretty=format:"%H %h %T %t %P %p" --graph
[%an Author Name|%ae Author Email|%ad Author Date(Format Respects The --date=option)|%ar Author Date, Relative[<> Hour Ago]]
git log --pretty=format:"%an %ae %ad %ar" --graph
[%cn Committer Name|%ce Committer Email|%cd Committer Date(Format Respects The --date=option)|%cr Committer Date, Relative[<> Hour Ago],Subject]
git log --pretty=format:"%cn %ce %cd %cr %s" --graph
Undoing Commited File By Replacing Previous Commit:
    git commit -m '<Message>'
    git add <ForgottenFile>
    git commit --amend -m '<ChangedMessage>'
git reset HEAD <FileName> -Only Use Staging/Index Area.So Only To UnStage The Staged File Use Default Option.
git checkout[Copies Data From Repository To Working Directory] -- <FileName OverWritten From Repository>
git remote -v[Verbose Will Display All Fetch/Push Url For Specific Repository]
Add Remote Repository:
git remote add <ShortName> <Url> Ex.git remote add Spring420Release https://github.com/SageGandhi/spring-framework.git
git remote fetch Spring420Release[Only Fetched From Server All The Changes Took Place After Clone.No Merging,To Merge Use pull]
Use Atlasian Connector For Eclipse:
Pushing To A Remote Branch:git push <Remote Short Name> <Remote Branch Name>
Show Details:git remote show <Remote Short Name|origin>
Rename:git remote rename <Old Remote Short Name> <New Remote Short Name>
Removal:git remote rm <Remote Short Name>
Creating Annotated Tag:git tag -a v1.0 -m "Annotated Tag"|git tag "Release.1.0"
Get Tag Name:git tag
git log --pretty=oneline|git tag -a "BaseVersionAnnotated" -m "Using Hash" 199f98548a3dcabe64762baf6f3988df06eec1b8
git log --pretty=oneline|git tag "BaseVersion" 199f98548a3dcabe64762baf6f3988df06eec1b8
To Push The Tag In Remote Server:git push <RemoteServer> <TagName>
Ex.git push origin BaseVersion|git push origin BaseVersionAnnotated
To Push All Tag Not Already In Server:git push origin --tag
Aliasing Command:
Creating Alias Pretty Graph:
git config --global alias.pg 'log --pretty=format:"%h %t %p %an %ae %s" --graph'
To Execute External Command Using Alias Use !:git config --global alias.visual '!gitk'
==============================================================Chapter:03:Model==================================================================
Git Porcelain[High Level] Vs Plumbing[Low Level] Command.
Persistent Map[Key,Value]->Stupid Content Tracker->Revision Control System->Distributed Revision Control System.
Persistent Map[Key,Value]:Value Will Be Any Byte[File Content],Key:Sha1 Hash.Sha1 Hash Can Be Generated As Follows:
echo "Git Will Generate Sha1 Hash For It"|git hash-object --stdin->de284c8304581a75c228b0c7b407e9faad033b22
echo "Git Will Generate Sha1 Hash For It"|git hash-object --stdin -w->Write In .git Directory Under objects Directory Will Find "de" Directory Due To Hash
git hash-object NotesFromProGit.rtf'->c0339dc8ffc715a219bfb28d4d6f94691eb2606a
For Type Of The Object From Hash:git cat-file de284c8304581a75c228b0c7b407e9faad033b22 -t
For Pretty Printing Of The Object From Hash:git cat-file de284c8304581a75c228b0c7b407e9faad033b22 -p
Commit Sample Project With 1 File+ 1 File Inside Directory.Commit Into Bare Repository.Use git log To Get The Hash.
Example:
git cat-file -p 79686f4f7a63c60f0c04f51c45b60c25c4d4007c->Pretty Print For Hash,Has Parent Hash For tree be5bf33fad3b4765a522404d51fa04976cb98d3b
git cat-file -t 79686f4f7a63c60f0c04f51c45b60c25c4d4007c->Type For Hash #Type Is commit
git cat-file -t be5bf33fad3b4765a522404d51fa04976cb98d3b->Type For Hash #Type Is tree
git cat-file -p be5bf33fad3b4765a522404d51fa04976cb98d3b->Contains Hash For A tree & A blob
040000 tree 8c64d21c90e02c6eb62087fa0c4fc43f6255d280    Details->040000 File Permission
100644 blob b8dc3312ce50cc220c0c3a7705703b3b84408609    LikedItem.txt->100644 File Permission
git cat-file -p 8c64d21c90e02c6eb62087fa0c4fc43f6255d280->Contains Another blob
100644 blob cdb03a0494acf5a2c7cd3894c9bf38355ad0b71a    HydrabadiPaneer.txt
git cat-file -p cdb03a0494acf5a2c7cd3894c9bf38355ad0b71a|echo->Contains Content Of HydrabadiPaneer.txt blob
git cat-file -p b8dc3312ce50cc220c0c3a7705703b3b84408609|echo->Contains Content Of LikedItem.txt blob
blob Stores Content Of A File,tree Stores Content Of A Directory
Then Change LikedItem.txt & Commit:
Second Commit Have git cat-file -t 7e3b72ee14a03068d86696e26d011ff84ea9b9ce, 
    1 tree ba477bbc1eb8fec6122b52c59153ecdd410e14fe & 1 parent 79686f4f7a63c60f0c04f51c45b60c25c4d4007c->First Commit
 git count-objects Will Return How Many Objects In Git Node[Root,Parent,Tree The Whole Graph]    
==============================================================Added In Office===================================================================
Info/Pack Directory Used For Keeping Large File Delta Changes,May Be By Tracking Only Delta Change Or Compressing Some Part Of It.
Git Object Model Consist Of Blob,Tree,Commit,Annotated Tag.
==============================================================Chapter:03:Branching==============================================================
master Branch Is Created By git init Command By Default.Current Branch Is Pointed By HEAD Pointer.git branch <BranchName> Will Create A Branch,
But Not Switched To Created Branch By Default.git log --oneline --decorate Will Show Which Branch Head Is Pointing To.
Switch To Different Branch Using git checkout <BranchName>
How Does This Command Move Information Across The Four Areas|How Does This Command Change The Repository
Changes Files In Working Directory|Repository Does Not Change
Head Pointer Moved To Checkout Branch.Branch Is Just A Commit.
To Create A Branch & Switch At The Same Time git checkout -b <BranchName> ->Same As git branch <BranchName> Then git checkout <BranchName>
git log --oneline --decorate --graph --all Is Useful Command For Viewing Divergence.As Branch Are Only ~40 Character Data,
Branch Creation Is Pretty Fast[Points To CheckSum Of A Commit,40Charater+1 New Line Character].Also A Commit Points To Parent 
Commit, So Merge Base Exists To Merge Easily.Before Switch We Need To Either Commit Or Stash Changes We Have Committed In Current Branch.By 
Switching Git Reset Working Directory.Use git log --all --graph --decorate --oneline For Viewing Different Branch In Graphical Way[So Called].
If Both Branch Is Not Divergent Then It Is Called Fast-Forward[Git Optimization].
To Delete A Branch Use git branch -d <BranchName>.
Git Will Either Checkout Branch Easily Or Will Not Let You Do It. 
Also In 3-Way Merge Commit Will Create A Separate Commit,Have More Than 1 Parent.
Git MergeTool Configuration:Get Help Using git mergetool --tool-help
Beyond Compare Config As Merge Tool:
git config --global merge.tool bc3
git config --global mergetool.bc3.trustExitCode true
Config Beyond Compare Path:git config --global mergetool.bc3.path C:/Soft/BeyondCompare4/BCompare.exe
Edit Global File:git config --global --edit
git branch -v --merged Will Show Which Branches Are Already Merged With Current Branch{Head}.
git branch -v --no-merged Will Show Which Branches Are Not Merged With Current Branch{Head}.No-Merged Branch Ca Not Be Deleted Unless Forced.
To Forcefully Delete A Branch By git branch -D <BranchName>
Git Uses Three-Way Merge[Common-Base,Your Current Merge-Into Branch,Mergein Branch].Two-Way Merge[Your Current Merge-Into Branch,Mergein Branch]Branch Like Work Silo Perspective.
origin Is Default Name For Remote Server,Change This Using git clone <Url> -o <OriginName>.
git ls-remote origin|git remote show origin Will Return Full List OfRemote Reference.
git fetch origin->Fetch Data From Remote Origin,Move Remote Ref origin/master,Update Local Object Db.
git push <Remote> <Branch>->To Push A Branch In Remote Which Is Same As git push <Remote> <LocalBranch>:<RemoteBranch>.<LocalBranch> & <RemoteBranch> Have The Same Name Or Different One.
While Pushing Git Will Ask For Credential,Use git config --global credential.helper cache To Keep Credential In Cache.
Use git merge <Remote>/<BranchName> To Merge It With Current Branch Or 
To Checkout git checkout -b <YourLocalBranchName> <Remote>/<BranchName> Is Same As git checkout --track <Remote>/<BranchName> With Local Branch Created Will Be Of Same Name As Of Remote.Remote Branch Is Called UpStream Branch,Local Branch Is Called Tracking Branch.
Git Will Know When We Do git pull From Which Remote Branch To Pull From & Where Git Should Merge Into.
To Change UpStream For Tracking Branch Either Use git branch -u  /--set-upstream <Remote>/<BranchName>.
git branch -vv Display All Branches & Differences In Commit[Ahead/Behind:3Ahead/1Behind->3 Commit Done In Local But Not Pushed In Remote/1 Commit Done In Remote But Not Pulled Into Local].
git pull~git fetch[No Changes In Working Repository] Then git merge[Changes Made Into Working Directory].
To Delete A Branch In Remote:git push <Remote> --delete <BranchName>
For Integrating Changes :Either You Do git merge Or git rebase.
What A git merge Do->Take Latest Snapshots[Commit] Of The Branches MergeIn & MergeInto+Most Recent Common Ancestor In Between These 2.Then Create A New Commit.
What A git rebase Do->So There Are 3 Snapshot[Branches Current Working Branch & RebaseOnto+Most Recent Common Ancestor] To Consider.Take All The Changes Happened In That Branch.By This Way Take All The Change That Were Committed In One Branch & Replay Them On Another Branch.It Works By Going To The Common Ancestor Of The Two Branches(The One On Working Directory & The One We’re Rebasing Onto), Getting The Diff Introduced By Each
Commit Of The Branch On Working Directory, Saving Those Diffs To Temporary Files, Resetting The Current Branch To The Same Commit As The Branch You Are Rebasing Onto,& Finally Applying Each Change In Turn.In Rebasing History Changed,Linear History.
=============================================================Distributed Git:Centralised Workflow================================================
Just Like Other Version Control System Model[Svn,Cvs]
=============================================================Distributed Git:Integration-Manager Workflow========================================
One Called Blessed Repositoty.Useful When Using GitHub,GitLab With Forking Support.Steps As Followed:
1.The Project Maintainer Pushes To Their Public Repository.
2.A Contributor Clones That Repository & Makes Changes.
3.The Contributor Pushes To Their Own Public Copy.
4.The Contributor Sends The Maintainer An Email Asking Them To Pull Changes.
5.The Maintainer Adds The Contributor’s Repo As A Remote & Merges Locally.
6.The Maintainer Pushes Merged Changes To The Main Repository.
=============================================================Dictator & Lieutenants Workflow=====================================================
1.Regular Developers Work On Their Topic Branch & Rebase Their Work On Top Of master[The master Branch Is That Of The Dictator.]
2.Lieutenants merge the developers’ topic branches into their master branch.
3.The dictator merges the lieutenants’ master branches into the dictator’s master branch.
4.The dictator pushes their master to the reference repository so the other developers can rebase on it.
=================================================================================================================================================
git merge --squash[Real Merge Happened But Without Commit]/--no-commit[Delay The Merge Commit]
git config --global rerere.enabled true[Enabling Reusing Recorded Resolution]
git log --abbrev-commit --oneline[Short Un-Ambiguous Sha1]
git reflog[Where Is Head Pointing Over Certain Time,For Detailing Use git log -g]
git show Sha1Commit^Num[Num Parent,Num=2 Means 2nd Parent,Useful For Merge Commit]
git show Sha1Commit~Num[Num Parent,Num=2 Means 1st Parent Of 1st Parent]
git log NotReachableFrom..RechableFrom[git log master..spring: Means Available In Commit spring But Not Reachable From master]
git log NotReachableFrom..RechableFrom Same As git log ~NotReachableFrom RechableFrom Same As git log RechableFrom --not NotReachableFrom
