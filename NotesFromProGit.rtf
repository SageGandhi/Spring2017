==============================================================Chapter:01:Begining==============================================================
git config --global user.name "Prajit Gandhi"
git config --global user.email "Prajit.Ju@gmail.com"
git config --global core.editor "C:\Soft\NotePad\notepad++.exe"
To Check Settings:git config --list
Check Particular Property:git config user.name
For Help:git help config/git config --help
==============================================================Chapter:02:Git Basics============================================================
Initialized A Git Directory In NonExisting Empty Directory:git init
Add Files To Local Repo:git add *.png
Commit Files:git commit[Will Open Default Editor We Set Earlier,Add A Commit Message[Initial Commit For Demo Git Project]]
To Clone Use:git clone https://github.com/spring-projects/spring-framework.git .\Spring500ReleaseCandidate02\[Example Url]
TrackedUnTracked.png To Show Tracked & UnTracked File In Git Use:git status
git add Is Polymorphic.
git status --short|git status --s Output Simplified Version
FirstColumn[Status For Staging Area,A:Added,M:Modified]|SecondColumn[Status For Working Directory,A:Added,M:Modified]
Untracked Files Will Have ?? In Those 2 Columns.
Use Kinesics Text Editor For Cmd Text Editing.For .gitignore See https://github.com/github/gitignore
To Retrieve Differences Between Working Area & Stage Area We Will Use git diff
To Retrieve Differences Between Stage Area & Last Commit We Will Use git diff --staged/git diff --cached
SetUp Default Diff Tool & DiffTool Gui:
To Unset Any Values In Configuration:Ex. git config --unset diff.guitool |git config --unset diff.tool
To Check The DiffTool Help:git difftool --tool-help
Set Default Diff Tool Using  git difftool --tool=diffuse,Also Do Following:
For Details Goto https://www.git-scm.com/docs/git-difftool/1.7.10:
git config diff.tool diffuse
git config diff.guitool diffuse
git config difftool.diffuse.path "C:\Soft\Diffuse\diffuse.exe"
git commit Will Commit Only Staged File.UnStaged Files Needs To Be Staged First.
git commit With -v[Verbose] & -m[Message],-a[Add Directly To Skip Staging,But Add All Changed Files] Option/Flag.
git rm --cached <FileName> Remove Files From Staging/Index Area -f Flag Will Force Removal.
git mv <FileNameFrom> <FileNameTo> Will Rename File In Git.
git log --patch -2 --stat[Check Git History With What Patched[-p/--patch] For 2 Last Commit,With Statistics]
git log --pretty=oneline|short|full|fuller[For Pretty Print]
[%H Commit Hash|%h Abbreviated Commit Hash|%T Tree Hash|%t Abbreviated Tree Hash|%P Parent Hashes|%p Abbreviated Parent Hashes]
git log --pretty=format:"%H %h %T %t %P %p" --graph
[%an Author Name|%ae Author Email|%ad Author Date(Format Respects The --date=option)|%ar Author Date, Relative[<> Hour Ago]]
git log --pretty=format:"%an %ae %ad %ar" --graph
[%cn Committer Name|%ce Committer Email|%cd Committer Date(Format Respects The --date=option)|%cr Committer Date, Relative[<> Hour Ago],Subject]
git log --pretty=format:"%cn %ce %cd %cr %s" --graph
Undoing Commited File By Replacing Previous Commit:
    git commit -m '<Message>'
    git add <ForgottenFile>
    git commit --amend -m '<ChangedMessage>'
git reset HEAD <FileName> -Only Use Staging/Index Area.So Only To UnStage The Staged File Use Default Option.
git checkout[Copies Data From Repository To Working Directory] -- <FileName OverWritten From Repository>
git remote -v[Verbose Will Display All Fetch/Push Url For Specific Repository]
Add Remote Repository:
git remote add <ShortName> <Url> Ex.git remote add Spring420Release https://github.com/SageGandhi/spring-framework.git
git remote fetch Spring420Release[Only Fetched From Server All The Changes Took Place After Clone.No Merging,To Merge Use pull]
Use Atlasian Connector For Eclipse:
Pushing To A Remote Branch:git push <Remote Short Name> <Remote Branch Name>
Show Details:git remote show <Remote Short Name|origin>
Rename:git remote rename <Old Remote Short Name> <New Remote Short Name>
Removal:git remote rm <Remote Short Name>
Creating Annotated Tag:git tag -a v1.0 -m "Annotated Tag"|git tag "Release.1.0"
Get Tag Name:git tag
git log --pretty=oneline|git tag -a "BaseVersionAnnotated" -m "Using Hash" 199f98548a3dcabe64762baf6f3988df06eec1b8
git log --pretty=oneline|git tag "BaseVersion" 199f98548a3dcabe64762baf6f3988df06eec1b8
To Push The Tag In Remote Server:git push <RemoteServer> <TagName>
Ex.git push origin BaseVersion|git push origin BaseVersionAnnotated
To Push All Tag Not Already In Server:git push origin --tag
Aliasing Command:
Creating Alias Pretty Graph:
git config --global alias.pg 'log --pretty=format:"%h %t %p %an %ae %s" --graph'
To Execute External Command Using Alias Use !:git config --global alias.visual '!gitk'
==============================================================Chapter:03:Model==================================================================
Git Porcelain[High Level] Vs Plumbing[Low Level] Command.
Persistent Map[Key,Value]->Stupid Content Tracker->Revision Control System->Distributed Revision Control System.
Persistent Map[Key,Value]:Value Will Be Any Byte[File Content],Key:Sha1 Hash.Sha1 Hash Can Be Generated As Follows:
echo "Git Will Generate Sha1 Hash For It"|git hash-object --stdin->de284c8304581a75c228b0c7b407e9faad033b22
echo "Git Will Generate Sha1 Hash For It"|git hash-object --stdin -w->Write In .git Directory Under objects Directory Will Find "de" Directory Due To Hash
git hash-object NotesFromProGit.rtf->c0339dc8ffc715a219bfb28d4d6f94691eb2606a
For Type Of The Object From Hash:git cat-file de284c8304581a75c228b0c7b407e9faad033b22 -t
For Pretty Printing Of The Object From Hash:git cat-file de284c8304581a75c228b0c7b407e9faad033b22 -p
Commit Sample Project With 1 File+ 1 File Inside Directory.Commit Into Bare Repository.Use git log To Get The Hash.
Example:
git cat-file -p 79686f4f7a63c60f0c04f51c45b60c25c4d4007c->Pretty Print For Hash,Has Parent Hash For tree be5bf33fad3b4765a522404d51fa04976cb98d3b
git cat-file -t 79686f4f7a63c60f0c04f51c45b60c25c4d4007c->Type For Hash #Type Is commit
git cat-file -t be5bf33fad3b4765a522404d51fa04976cb98d3b->Type For Hash #Type Is tree
git cat-file -p be5bf33fad3b4765a522404d51fa04976cb98d3b->Contains Hash For A tree & A blob
040000 tree 8c64d21c90e02c6eb62087fa0c4fc43f6255d280    Details->040000 File Permission
100644 blob b8dc3312ce50cc220c0c3a7705703b3b84408609    LikedItem.txt->100644 File Permission
git cat-file -p 8c64d21c90e02c6eb62087fa0c4fc43f6255d280->Contains Another blob
100644 blob cdb03a0494acf5a2c7cd3894c9bf38355ad0b71a    HydrabadiPaneer.txt
git cat-file -p cdb03a0494acf5a2c7cd3894c9bf38355ad0b71a|echo->Contains Content Of HydrabadiPaneer.txt blob
git cat-file -p b8dc3312ce50cc220c0c3a7705703b3b84408609|echo->Contains Content Of LikedItem.txt blob
blob Stores Content Of A File,tree Stores Content Of A Directory
Then Change LikedItem.txt & Commit:
Second Commit Have git cat-file -t 7e3b72ee14a03068d86696e26d011ff84ea9b9ce, 
    1 tree ba477bbc1eb8fec6122b52c59153ecdd410e14fe & 1 parent 79686f4f7a63c60f0c04f51c45b60c25c4d4007c->First Commit
 git count-objects Will Return How Many Objects In Git Node[Root,Parent,Tree The Whole Graph]    
==============================================================Added In Office===================================================================
Info/Pack Directory Used For Keeping Large File Delta Changes,May Be By Tracking Only Delta Change Or Compressing Some Part Of It.
Git Object Model Consist Of Blob,Tree,Commit,Annotated Tag.
==============================================================Chapter:03:Branching==============================================================
master Branch Is Created By git init Command By Default
Current Branch Is Pointed By HEAD Pointer.git branch <BranchName> Will Create A Branch,But Not Switched To Created Branch By Default.
git log --oneline --decorate Will Show Which Branch Head Is Pointing To.
Switch To Different Branch Using git checkout <BranchName>
How Does This Command Move Information Across The Four Areas|How Does This Command Change The Repository
Changes Files In Working Directory|Repository Does Not Change
Head Pointer Moved To Checkout Branch.